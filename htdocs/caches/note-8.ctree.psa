a:12:{s:5:"title";s:28:"Начинаем работать с&nbsp;GIT";s:4:"text";s:4837:"Начал детальное изучение <i>git</i> по книге <a href="http://progit.org/book/ru/">pro git</a>. Статья будет постепенно дополняться разнообразными вкусностями о которых я буду узнавать. Базовые вещи, как фиксирование или добавление изменений тут рассматриваться не будут.<br /><br /><b>Базовая конфигурация</b><br /><br />Конфигурирование происходит с помощью утилиты <i>git config</i>. Есть несколько уровней глобальности настроек. <ul><li>Файл <i>/etc/gitconfig</i> содержит значения, общие для всех пользователей вашей системы и всех их репозиториев. Если вы указываете параметр <i><b>&mdash;system</b></i>, запуская <i>git config</i>, то параметры читаются и сохраняются в этот файл.</li><li>Файл <i>~/.gitconfig</i> хранит настройки конкретного пользователя. Этот файл используется при указании параметра <i><b>&mdash;global</b></i>.</li><li>Конфигурационный файл в каталоге <i>.git/config</i> в том репозитории, где вы находитесь в данный момент. Эти параметры &#8213; только для данного конкретного репозитория.</li></ul>Настройки на каждом уровне подменяют настройки из предыдущего, то есть значения в <i>.git/config</i> перекрывают соответствующие значения в <i>/etc/gitconfig</i>.<br /><br />Задание настроек происходит следующим образом:<blockquote>$ git config &mdash;global user.name &laquo;Yegor Lukash&raquo;<br />$ git config &mdash;global user.email yegor.lukash@gmail.com<br />$ git config &mdash;system color.branch auto<br />$ git config &mdash;system color.status auto<br />$ git config &mdash;system color.diff auto</blockquote>Чтобы посмотреть список настроек можно воспользоваться флагом <i><b>&mdash;list</b></i>. Результат:<blockquote>$ git config &mdash;list<br />user.name=Yegor Lukash<br />user.email=yegor.lukash@gmail.com<br />core.repositoryformatversion=0<br />core.filemode=true<br />core.bare=false<br />core.logallrefupdates=true<br />remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*<br />remote.origin.url=git://github.com/test/test.git<br />branch.master.remote=origin<br />branch.master.merge=refs/heads/master</blockquote>Для каждой команды можно ввести алиас, чтобы пользоваться короткой записью. Сделать это можно следующим образом:<blockquote>$ git config &mdash;global alias.co checkout<br />$ git config &mdash;global alias.br branch<br />$ git config &mdash;global alias.ci commit<br />$ git config &mdash;global alias.st status</blockquote>Фичу с алиасами можно использовать не только для сокращения имени команд, можно создавать новые команды на основе комбинаций других. Например, следующий пример позволяет удобно использовать одну команду <i>last</i> для получения информации о последнем коммите:<blockquote>$ git config &mdash;global alias.last &rsquo;log -1 HEAD&rsquo;</blockquote><b>Добавление файлов в игнор-лист</b><br /><br />Часто в процессе работы сайта происходят какие-то динамические изменения в файлах. Например запись в лог или генерирование кэша. В таком случае можно воспользоваться игнор-листом. Для этого необходимо создать файл &laquo;<i>.gitignore</i>&raquo; и внести в него правила. Вот пример такого файла:<blockquote>$ cat .gitignore<br />*.[oa]<br />!!*~</blockquote>Первая строка говорит о том что нужно проигнорировать все файлы, заканчивающиеся на .o и .a, а вторая скрывает от&nbsp;git временные файлы. Для фиксирования правил используются&nbsp;glob-шаблоны.<br /><br /><b>Работа с удаленными ветками</b><br /><br />Ну что же, сам <i>git</i> является дециентрализованной системой управления версиями. Это значит, что часто приходится работать с удаленными ветками. Для просмотра информации об удаленном репозитории можно воспользоваться командой remote <i>show</i>:<blockquote>$ git remote show origin</blockquote>Ответ будет содержать основную инфу по репозиторию и, что важно, об существующих ветках:<blockquote>remote origin<br /> Fetch URL: git://github.com/lukashes/test.git<br /> Push URL: git://github.com/lukashes/test.git<br /> HEAD branch: master<br /> Remote branches:<br /> dev tracked<br /> master tracked<br /> Local branch configured for &rsquo;git pull&rsquo;:<br /> master merges with remote master<br /> Local ref configured for &rsquo;git push&rsquo;:<br /> master pushes to&nbsp;master (up to&nbsp;date)</blockquote>Для удаления или переименования <b>репозиториев</b> можно воспользоваться утилитами <i>rm</i> и <i>rename</i> соответственно (<i>git remote rename old_name new_name</i>).<br /><br /><b>Ветвление</b><br /><br />Для работы с ветками используется команда <i>branch</i>, помимо создания/удаления веток она имеет еще несколько специфических возможностей. Например, флаг <i>-v</i> позволяет отобразить последний коммит для каждой из локальных веток:<blockquote>$ git branch -v<br />* develop 251dea6 Восстановление работоспособности тестов<br /> master f567df3 [behind 13] Merge branch &rsquo;master&rsquo;...</blockquote>";s:4:"time";a:2:{i:0;i:1320438108;i:1;a:2:{s:6:"offset";i:14400;s:6:"is_dst";b:0;}}s:13:"last-modified";a:2:{i:0;i:1325099955;i:1;a:2:{s:6:"offset";i:14400;s:6:"is_dst";b:0;}}s:7:"last-ip";s:13:"94.158.169.92";s:10:"published?";b:1;s:12:"commentable?";b:1;s:10:"favourite?";b:0;s:8:"visible?";b:1;s:4:"tags";a:1:{i:0;a:2:{s:4:"name";s:3:"git";s:4:"href";s:25:"http://lukashes/tags/git/";}}s:14:"comments-count";i:1;s:17:"your-comment-href";s:37:"http://lukashes/2011/11/05/1/comment/";}