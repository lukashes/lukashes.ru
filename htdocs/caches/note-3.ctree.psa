a:12:{s:5:"title";s:24:"Уровни изоляции&nbsp;SQL";s:4:"text";s:6627:"Информация в данной статье по большей части справочная, чем исследовательская. Но, прежде чем говорить о теме, предлагаю немного поговорить о транзакциях.<br /><br /><b>Транзакции</b><br /><br />Все мы знаем о транзакциях, но не многие слышали о&nbsp;ASID-транзакциях. Эта аббревиатура расшифровывается как <i>Atomicity</i>, <i>Consistency</i>, <i>Isolation</i> и <i>Durability</i> (атомарность, непротиворечивость, изолированность и долговечность).<br /><br />Это тесно связанные критерии, которым должна соответствовать правильно функционирующая система транзакционной обработки:<br /><b><i>Атомарность</i></b><blockquote>Транзакция должна функционировать как единая неделимая еди-<br />ница работы таким образом, чтобы вся транзакция была либо вы-<br />полнена, либо отменена. Когда транзакции являются атомарными,<br />не существует такого понятия, как частично выполненная транзак-<br />ция: все или ничего.</blockquote><b><i>Непротиворечивость</i></b><blockquote>База данных должна всегда переходить из одного непротиворечиво-<br />го состояния в последующее. В нашем примере непротиворечивость<br />гарантирует, что сбой между третьей и четвертой строками не при-<br />ведет к исчезновению $200 с текущего счета. Поскольку транзакция<br />не будет зафиксирована, ни одно из изменений в этой транзакции не<br />будет отражено в базе данных.</blockquote><b><i>Изолированность</i></b><blockquote>Результаты транзакции обычно невидимы другим транзакциям,<br />пока она не закончена. Это гарантирует, что если в нашем примере<br />программа суммирования остатков на банковских счетах будет за-<br />пущена после третьей строки, но перед четвертой, она по-прежнему<br />увидит $200 на текущем счете. Когда мы будем обсуждать уровни<br />изоляции, вы поймете, почему мы говорим обычно невидимы.</blockquote><b><i>Долговечность</i></b><blockquote>Будучи зафиксированы, внесенные в ходе транзакции изменения<br />становятся постоянными. Это означает, что изменения должны быть<br />записаны так, чтобы данные не могли быть потеряны в случае сбоя<br />сис&#173;темы. Долговечность, однако, является несколько расплывчатой<br />концепцией, поскольку на самом деле существует много уровней.<br />Некоторые стратегии обеспечения долговечности предоставляют бо-<br />лее сильные гарантии безопасности, чем другие, и ни одна из них	<br />не является надежной на 100%.</blockquote><b>Сами уровни изоляции</b><br /><br />Изолированность&nbsp;&mdash; более сложное понятие, чем кажется на первый взгляд. Стандарт SQL определяет четыре уровня изоляции с конкретными правилами, устанавливающими, какие изменения видны внутри и вне транзакции, а какие нет. Более низкие уровни изоляции обычно допускают большую степень совместного доступа и вызывают меньше накладных расходов.<br /><br />Информация о 4х уровнях:<br /><b><i>READ UNCOMMITTED</i></b><blockquote>На уровне изоляции <i>READ UNCOMMITTED</i> транзакции могут видеть ре-<br />зультаты незафиксированных транзакций. На этом уровне вы мо-<br />жете столкнуться со множеством проблем, если не знаете абсолютно<br />точно, что делаете. Используйте этот уровень, если у вас есть на то<br />веские причины. На практике <i>READ UNCOMMITTED</i> используется редко,<br />поскольку его производительность ненамного выше, чем у других<br />уровней, имеющих множество преимуществ. Чтение незафиксиро-<br />ванных данных еще называют грязным чтением (<i>dirty read</i>).</blockquote><b><i>READ COMMITTED</i></b><blockquote>Уровнем изоляции по умолчанию для большинства&nbsp;СУБД (но не для<br />MySQL!) является <i>READ COMMITTED</i>. Он удовлетворяет вышеприведен-<br />ному простому определению изолированности: транзакция увидит<br />только те изменения, которые были уже зафиксированы другими<br />транзакциями к моменту ее начала, а произведенные ею изменения<br />останутся невидимыми для других транзакций, пока текущая тран-<br />закция не будет зафиксирована. На этом уровне возможен феномен<br />невоспроизводимого чтения (<i>nonrepeatable read</i>). Это означает, что<br />вы можете выполнить одну и ту же команду дважды и получить раз-<br />личный результат.</blockquote><b><i>REPEATABLE READ</i></b><blockquote>Уровень изоляции <i>REPEATABLE READ</i> решает проблемы, которые возни-<br />кают на уровне <i>READ UNCOMMITTED</i>. Он гарантирует, что любые строки,<br />которые считываются в контексте транзакции, будут &laquo;выглядеть<br />такими же&raquo; при последовательных операциях чтения в пределах<br />одной и той же транзакции, однако теоретически на этом уровне<br />возможен феномен фантомного чтения (<i>phantom reads</i>). Попросту<br />говоря, фантомное чтение может происходить в случае, если вы вы-<br />бираете некоторый диапазон строк, затем другая транзакция встав-<br />ляет новую строку в этот диапазон, после чего вы выбираете тот же<br />диапазон снова. В результате вы увидите новую &laquo;фантомную&raquo; стро-<br />ку. В <i>InnoDB</i> и <i>Falcon</i> проблема фантомного чтения решается с помо-<br />щью MVCC (<i>multiversion concurrency control</i>).<br /><i>REPEATABLE READ</i> является в&nbsp;MySQL уровнем изоляции транзакций по<br />умолчанию. Подсис&#173;темы хранения данных InnoDB и&nbsp;Falcon следуют<br />этому соглашению. Некоторые другие подсис&#173;темы хранения данных <br />поступают так же, но выбор остается за конкретной подсистемой.</blockquote><b><i>SERIALIZABLE</i></b><blockquote>Самый высокий уровень изоляции, <i>SERIALIZABLE</i>, решает проблему<br />фантомного чтения, заставляя транзакции выполняться в таком<br />порядке, чтобы исключить возможность конфликта. В двух словах,<br />уровень <i>SERIALIZABLE</i> блокирует каждую строку, которую транзак-<br />ция читает. На этом уровне может возникать множество задержек<br />и конфликтов при блокировках. На практике данный уровень изо-<br />ляции применяется достаточно редко, но потребности вашего при-<br />ложения могут заставить вас использовать его, согласившись с мень-<br />шей степенью совместного доступа в пользу стабильности данных.</blockquote>Подведем итог в качестве общей информации, собранной в табличке:<br /><br /><table class="e2-text-table"><tr><td>Уровень изоляции</td><td>Возможность грязного чтения</td><td>Возможность невоспроизводимого чтения</td><td>Возможность фантомного чтения</td><td>Блокировка чтения</td></tr><tr><td><i>READ UNCOMMITTED</i></td><td>+</td><td>+</td><td>+</td><td>-</td></tr><tr><td><i>READ COMMITTED</i></td><td>-</td><td>+</td><td>+</td><td>-</td></tr><tr><td><i>REPEATABLE READ</i></td><td>-</td><td>-</td><td>+</td><td>-</td></tr><tr><td><i>SERIALIZABLE</i></td><td>-</td><td>-</td><td>-</td><td>+</td></tr></td></tr></table>";s:4:"time";a:2:{i:0;i:1318353843;i:1;a:2:{s:6:"offset";i:14400;s:6:"is_dst";b:0;}}s:13:"last-modified";a:2:{i:0;i:1318353795;i:1;a:2:{s:6:"offset";i:14400;s:6:"is_dst";b:0;}}s:7:"last-ip";s:14:"178.49.248.132";s:10:"published?";b:1;s:12:"commentable?";b:1;s:10:"favourite?";b:0;s:8:"visible?";b:1;s:4:"tags";a:3:{i:0;a:2:{s:4:"name";s:5:"mysql";s:4:"href";s:27:"http://lukashes/tags/mysql/";}i:1;a:2:{s:4:"name";s:3:"sql";s:4:"href";s:25:"http://lukashes/tags/sql/";}i:2;a:2:{s:4:"name";s:11:"transaction";s:4:"href";s:33:"http://lukashes/tags/transaction/";}}s:14:"comments-count";i:0;s:17:"your-comment-href";s:37:"http://lukashes/2011/10/11/1/comment/";}